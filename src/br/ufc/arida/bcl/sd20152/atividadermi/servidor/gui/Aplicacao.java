/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufc.arida.bcl.sd20152.atividadermi.servidor.gui;

import br.ufc.arida.bcl.sd20152.atividadermi.servidor.chat.ChatController;
import br.ufc.arida.bcl.sd20152.atividadermi.servidor.chat.Chat;
import br.ufc.arida.bcl.sd20152.atividadermi.servidor.chat.Usuario;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author brunoleal
 */
public class Aplicacao extends javax.swing.JFrame {

    private ChatController chatController;
    
    private int contadorDeMensagensDeLog;
    
    /**
     * Creates new form Aplicacao
     */
    public Aplicacao() {
        initComponents();
        
        chatController = new ChatController();
        contadorDeMensagensDeLog = 0;
    }
    
    public void iniciarServidorDeChat() {
        chatController.executar();
        threadAtualizador.start();
    }

    public void atualizarTelaDeLog() {
        int cont = chatController.getMensagensDeLog().size();
        while (contadorDeMensagensDeLog < cont) {
            jTextAreaLog.append(chatController.getMensagensDeLog().get(contadorDeMensagensDeLog) + "\n");
            contadorDeMensagensDeLog++;
        }
    }
    
    Thread threadAtualizador = new Thread() {
         
        @Override
        public void run() {
            

            while (true) {
                /*
                atualiza as mensagens de log
                */
                atualizarTelaDeLog();
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Aplicacao.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                /*
                atualiza a lista de usuarios conectados no sentido da lista de usuarios para a tabela:
                adiciona os que conectaram
                */
                DefaultTableModel modeloDeTabelaUsuarios = (DefaultTableModel)jTableUsuarios.getModel();
                for (int i=0; i < chatController.getUsuariosDoChat().size(); i++) {
                    Usuario usuario = chatController.getUsuariosDoChat().get(i);
                    if (!isUsuarioNaTabela(usuario)) {
                        modeloDeTabelaUsuarios.addRow(new Object[]{usuario.getNickname()});
                    }
                }
                
                /*
                atualiza a lista de usuarios conectados no sentido da tabela para a lista de usuarios:
                remove os que desconectaram.
                */
                DefaultTableModel modeloDeTabelaUsuarios2 = (DefaultTableModel)jTableUsuarios.getModel();
                for (int i = 0; i < modeloDeTabelaUsuarios2.getRowCount(); i++) {
                    String nick = modeloDeTabelaUsuarios2.getValueAt(i, 0).toString();
                    if(chatController.isUsuarioNoChat(nick)) {
                        modeloDeTabelaUsuarios2.removeRow(i);
                    }
                }
            }
        }
    };
    
    /**
     * Verifica se um usuario apresentado na tabela de usuarios se encontra na lista
     * de usuarios conectados ao chat.
     * @param usuario usuario a ser verificado se está na lista de usuários conectados.
     * @return true se o usuario estiver na lista de conectados e false c.c.
     */
    public boolean isUsuarioNaTabela(Usuario usuario) {
        for (int i = 0; i < jTableUsuarios.getRowCount(); i++) {
            if (usuario.getNickname().equalsIgnoreCase(jTableUsuarios.getModel().getValueAt(i, 0).toString())) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneLog = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jScrollPaneUsuarios = new javax.swing.JScrollPane();
        jTableUsuarios = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItemIniciar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSair = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        jMenuItemLimparAreaDeLog = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItemSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaLog.setEditable(false);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jScrollPaneLog.setViewportView(jTextAreaLog);

        jTableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneUsuarios.setViewportView(jTableUsuarios);
        if (jTableUsuarios.getColumnModel().getColumnCount() > 0) {
            jTableUsuarios.getColumnModel().getColumn(0).setResizable(false);
        }

        fileMenu.setMnemonic('f');
        fileMenu.setText("Arquivo");

        jMenuItemIniciar.setText("Iniciar");
        jMenuItemIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemIniciarActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemIniciar);
        fileMenu.add(jSeparator2);

        jMenuItemSair.setMnemonic('x');
        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemSair);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Editar");

        jMenuItemLimparAreaDeLog.setText("Limpar Area de Log");
        jMenuItemLimparAreaDeLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLimparAreaDeLogActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItemLimparAreaDeLog);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Ajuda");

        jMenuItemSobre.setMnemonic('a');
        jMenuItemSobre.setText("Sobre");
        helpMenu.add(jMenuItemSobre);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneLog, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneLog, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                    .addComponent(jScrollPaneUsuarios))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemSairActionPerformed

    private void jMenuItemIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemIniciarActionPerformed
        iniciarServidorDeChat();
    }//GEN-LAST:event_jMenuItemIniciarActionPerformed

    private void jMenuItemLimparAreaDeLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLimparAreaDeLogActionPerformed
        jTextAreaLog.setText("");
    }//GEN-LAST:event_jMenuItemLimparAreaDeLogActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aplicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aplicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aplicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aplicacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem jMenuItemIniciar;
    private javax.swing.JMenuItem jMenuItemLimparAreaDeLog;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSobre;
    private javax.swing.JScrollPane jScrollPaneLog;
    private javax.swing.JScrollPane jScrollPaneUsuarios;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTable jTableUsuarios;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

}
